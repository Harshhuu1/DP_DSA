class Solution {
public:
    bool isPalindrome(string &s, int i, int j) {
        while (i < j) {
            if (s[i++] != s[j--]) return false;
        }
        return true;
    }

    int solve(int i, string &s, vector<int> &dp) {
        int n = s.size();
        if (i == n) return 0;
        if (dp[i] != -1) return dp[i];

        int minCuts = INT_MAX;
        for (int j = i; j < n; j++) {
            if (isPalindrome(s, i, j)) {
                if (j == n - 1) 
                    minCuts = 0; // last partition, no cut needed
                else 
                    minCuts = min(minCuts, 1 + solve(j + 1, s, dp));
            }
        }

        return dp[i] = minCuts;
    }

    int minCut(string s) {
        int n = s.size();
        vector<int> dp(n, -1);
        return solve(0, s, dp);
    }
};
