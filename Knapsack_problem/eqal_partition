class Solution {
public:
    int t[1005][10005]; // max sum ~ 10^5 for safe

    // bool helper(vector<int>& nums, int n, int sum){
    //       if(sum==0) return true;
    //       if(t[n][sum]!=-1)
    //       return t[n][sum];
    //       if(nums[n-1]<=sum){
    //         return t[n][sum]=(helper(nums,n-1,sum-nums[n-1])||
    //                             helper(nums,n-1,sum));

    //       }
    //       else 
    //       return t[n][sum]=helper(nums,n-1,sum);
    // }
    bool canPartition(vector<int>& nums) {
       int total=accumulate(nums.begin(),nums.end(),0);
       int n=nums.size();
       if(total%2!=0) return false;
       int target=total/2;
       for(int i=0;i<n+1;i++){
        for(int j=0;j<target+1;j++){
            if(j==0) t[i][j]=true;
            else if(i==0) t[i][j]=false;
        }
       }
       for(int i=1;i<n+1;i++){
        for(int j=1;j<target+1;j++){
            if(nums[i-1]<=j)
            t[i][j]=(t[i-1][j-nums[i-1]]||t[i-1][j]);
        
        else
        t[i][j]=t[i-1][j];
       }
       }
       return t[n][target];
    }
};
