#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    string longestCommonSubstring(string s1, string s2) {
        int n = s1.size(), m = s2.size();
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
        int maxLen = 0;
        int endIndex = 0; // To remember where longest substring ends

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (s1[i - 1] == s2[j - 1]) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];

                    if (dp[i][j] > maxLen) {
                        maxLen = dp[i][j]; <h1>stores the maximum value of dp table so that we can find out the longest substring</h1>
                        endIndex = i; // store where it ends in s1
                    }
                } else {
                    dp[i][j] = 0; // reset if continuity breaks
                }
            }
        }

        // Extract substring from s1 using endIndex and maxLen
        string res = s1.substr(endIndex - maxLen, maxLen); // here we just print the lcsubstring
        return res;
    }
};

int main() {
    Solution sol;
    cout << sol.longestCommonSubstring("abcjklp", "acjkp") << endl;   // "jk"
    cout << sol.longestCommonSubstring("abcdxyz", "xyzabcd") << endl; // "abcd"
}
