class Solution {
public:
    unordered_map<string,bool> mp;
    bool solve(string a, string b){
        if(a.length()!=b.length()){
            return false;
        }
        if(a.empty() && b.empty()) return true;
        if(a==b) return true;
        if(a.length()<=1) return false;
        int n=a.length();

        string key=a;
        key+=" ";
        key.append(b);
        if(mp.find(key)!=mp.end()){
            return mp[key];
        }
        bool flag=false;

        for(int i=1;i<a.length();i++){
            if(((solve(a.substr(0,i),b.substr(n-i))&& (solve(a.substr(i),b.substr(0,n-i))))||
              ((solve(a.substr(0,i),b.substr(0,i)))&&(solve(a.substr(i),b.substr(i))))))
            {
                flag=true;
                
                break;
            }
            

        }
        return  mp[key]=flag;
    }
    bool isScramble(string s1, string s2) {
        return solve(s1,s2);
    }
};
