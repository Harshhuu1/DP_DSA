class Solution {
public:
    int longestCommonSubstring(string s1, string s2) {
        int n = s1.size(), m = s2.size();
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
        int result = 0;

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (s1[i - 1] == s2[j - 1]) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                    result = max(result, dp[i][j]);
                } else {
                    dp[i][j] = 0;
                }
            }
        }

        return result;
    }
};
//IN subsequence we care of only order but in substring we care the index also like "harsh" and "naresh" subsequence will be "arsh" but in substring  "ar" and "sh"; so we need to make 0 where the character
are not same;
