class Solution {
public:
    int solve(int i ,int j, int n ,int m,vector<vector<int>>& obstacleGrid,vector<vector<int>> &dp){
       
        if(i>=n || j>=m) return 0;
        if(obstacleGrid[i][j]==1){
            return 0;
        }
        if(dp[i][j]!=-1) return dp[i][j];

         if(i==n-1 && j==m-1) return 1;
            return dp[i][j]= solve(i+1,j,n,m,obstacleGrid,dp)+solve(i,j+1,n,m,obstacleGrid,dp);

    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
       
        int n=obstacleGrid.size();
        int m=obstacleGrid[0].size();
        vector<vector<int>> dp(n,vector<int>(m,-1));
        
       
    //    for(int i=0;i<n;i++) dp[i][0]=1;
    //    for(int j=0;j<n;j++) dp[0][j]=1;
        if(obstacleGrid[0][0]==1) return 0;
        return solve(0,0,n,m,obstacleGrid,dp);
    //   for(int i=1;i<n;i++){
    //     for(int j=1;j<m;j++){
            
    //         dp[i][j]=dp[i-1][j]+dp[i][j-1];
    //     }
    //   } 
    //   return dp[n-1][m-1];
        
    }
};
